/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { IUnicrow, IUnicrowInterface } from "../IUnicrow";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "escrowId",
        type: "uint256",
      },
      {
        internalType: "uint16[4]",
        name: "split",
        type: "uint16[4]",
      },
      {
        internalType: "int16[2]",
        name: "consensus",
        type: "int16[2]",
      },
      {
        internalType: "uint64",
        name: "challengeStart",
        type: "uint64",
      },
      {
        internalType: "uint64",
        name: "challengeEnd",
        type: "uint64",
      },
    ],
    name: "challenge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "escrowId",
        type: "uint256",
      },
    ],
    name: "getEscrow",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "buyer",
            type: "address",
          },
          {
            internalType: "uint64",
            name: "challengeExtension",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "seller",
            type: "address",
          },
          {
            internalType: "uint64",
            name: "challengePeriodStart",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "marketplace",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "marketplaceFee",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "challengePeriodEnd",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
          {
            internalType: "uint16",
            name: "claimed",
            type: "uint16",
          },
          {
            internalType: "int16[2]",
            name: "consensus",
            type: "int16[2]",
          },
          {
            internalType: "uint16[4]",
            name: "split",
            type: "uint16[4]",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct Escrow",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address",
            name: "marketplace",
            type: "address",
          },
          {
            internalType: "uint16",
            name: "marketplaceFee",
            type: "uint16",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "challengePeriod",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "challengeExtension",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct EscrowInput",
        name: "input",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "arbitrator",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "arbitratorFee",
        type: "uint16",
      },
    ],
    name: "pay",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "escrowId",
        type: "uint256",
      },
    ],
    name: "refund",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "escrowId",
        type: "uint256",
      },
    ],
    name: "release",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "escrowId",
        type: "uint256",
      },
    ],
    name: "setClaimed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "escrowId",
        type: "uint256",
      },
      {
        internalType: "uint16[4]",
        name: "split",
        type: "uint16[4]",
      },
      {
        internalType: "int16[2]",
        name: "consensus",
        type: "int16[2]",
      },
    ],
    name: "settle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16[5]",
        name: "currentSplit",
        type: "uint16[5]",
      },
    ],
    name: "splitCalculation",
    outputs: [
      {
        internalType: "uint16[4]",
        name: "",
        type: "uint16[4]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "fee",
        type: "uint16",
      },
    ],
    name: "updateEscrowFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "governance",
        type: "address",
      },
    ],
    name: "updateGovernance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IUnicrow__factory {
  static readonly abi = _abi;
  static createInterface(): IUnicrowInterface {
    return new utils.Interface(_abi) as IUnicrowInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IUnicrow {
    return new Contract(address, _abi, signerOrProvider) as IUnicrow;
  }
}
