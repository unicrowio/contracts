/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "FakeToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeToken__factory>;
    getContractFactory(
      name: "IUnicrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUnicrow__factory>;
    getContractFactory(
      name: "IUnicrowArbitrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUnicrowArbitrator__factory>;
    getContractFactory(
      name: "IUnicrowClaim",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUnicrowClaim__factory>;
    getContractFactory(
      name: "IUnicrowClaimRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUnicrowClaimRewards__factory>;
    getContractFactory(
      name: "IUnicrowDispute",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUnicrowDispute__factory>;
    getContractFactory(
      name: "IUnicrowStakingRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUnicrowStakingRewards__factory>;
    getContractFactory(
      name: "Unicrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Unicrow__factory>;
    getContractFactory(
      name: "UnicrowArbitrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UnicrowArbitrator__factory>;
    getContractFactory(
      name: "UnicrowClaim",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UnicrowClaim__factory>;
    getContractFactory(
      name: "UnicrowDispute",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UnicrowDispute__factory>;

    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "FakeToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeToken>;
    getContractAt(
      name: "IUnicrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUnicrow>;
    getContractAt(
      name: "IUnicrowArbitrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUnicrowArbitrator>;
    getContractAt(
      name: "IUnicrowClaim",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUnicrowClaim>;
    getContractAt(
      name: "IUnicrowClaimRewards",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUnicrowClaimRewards>;
    getContractAt(
      name: "IUnicrowDispute",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUnicrowDispute>;
    getContractAt(
      name: "IUnicrowStakingRewards",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUnicrowStakingRewards>;
    getContractAt(
      name: "Unicrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Unicrow>;
    getContractAt(
      name: "UnicrowArbitrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UnicrowArbitrator>;
    getContractAt(
      name: "UnicrowClaim",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UnicrowClaim>;
    getContractAt(
      name: "UnicrowDispute",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UnicrowDispute>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
